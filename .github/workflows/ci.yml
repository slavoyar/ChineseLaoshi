name: CI/CD Pipeline

on:
  pull_request:
    branches:
      - production  # Trigger on pull requests to the production branch
  push:
    branches:
      - production  # Also trigger on direct pushes to production

jobs:
  lint-build-frontend:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v2

      - name: Set up Node.js
        uses: actions/setup-node@v2

      - name: Install dependencies
        working-directory: ./frontend
        run: npm install

      - name: Lint frontend
        working-directory: ./frontend
        run: npm run lint

      - name: Build frontend
        working-directory: ./frontend
        run: npm run build

      - name: Archive production artifacts
        if: success()
        uses: actions/upload-artifact@v2
        with:
          name: frontend-build
          path: ./frontend/build

  deploy-frontend:
    runs-on: ubuntu-latest
    needs: lint-build-frontend

    steps:
      - name: Download artifacts
        uses: actions/download-artifact@v2
        with:
          name: frontend-build
          path: ./frontend/build

      - name: Deploy to remote server
        env:
          SSH_PRIVATE_KEY: ${{ secrets.SSH_PRIVATE_KEY }}
          REMOTE_HOST: ${{ secrets.REMOTE_HOST }}
          REMOTE_USER: ${{ secrets.REMOTE_USER }}
          REMOTE_PATH: ${{ secrets.REMOTE_PATH }}
        run: |
          eval $(ssh-agent -s)  # Start the SSH agent
          echo "${{ secrets.SSH_PRIVATE_KEY }}" | tr -d '\r' | ssh-add -  # Add the SSH key
          scp -r ./frontend/build/* ${REMOTE_USER}@${REMOTE_HOST}:${REMOTE_PATH}

  build-deploy-backend:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v2

      - name: Set up Node.js
        uses: actions/setup-node@v2
        
      - name: Install backend dependencies
        working-directory: ./backend
        run: npm install
      
      - name: Create .env file
        run: |
          echo "DATABASE_URL=${{ secrets.DB_HOST }}" >> ./backend/.env       

      - name: Build backend
        working-directory: ./backend
        run: npm run build  # If you have a build step, otherwise omit this

      - name: Deploy backend to remote server
        env:
          SSH_PRIVATE_KEY: ${{ secrets.SSH_PRIVATE_KEY }}
          REMOTE_HOST: ${{ secrets.REMOTE_HOST }}
          REMOTE_USER: ${{ secrets.REMOTE_USER }}
          REMOTE_PATH: ${{ secrets.REMOTE_BACKEND_PATH }}
        run: |
          eval $(ssh-agent -s)  # Start the SSH agent
          echo "${{ secrets.SSH_PRIVATE_KEY }}" | tr -d '\r' | ssh-add -  # Add the SSH key
          scp -r ./backend/* ${REMOTE_USER}@${REMOTE_HOST}:${REMOTE_PATH}

      - name: Restart backend with Forever
        env:
          SSH_PRIVATE_KEY: ${{ secrets.SSH_PRIVATE_KEY }}
          REMOTE_HOST: ${{ secrets.REMOTE_HOST }}
          REMOTE_USER: ${{ secrets.REMOTE_USER }}
          REMOTE_PATH: ${{ secrets.REMOTE_BACKEND_PATH }}
          APP_ENTRY: ${{ secrets.APP_ENTRY }}  # Entry point for your backend application
        run: |
          echo "${SSH_PRIVATE_KEY}" | ssh-add -
          ssh ${REMOTE_USER}@${REMOTE_HOST} "cd ${REMOTE_PATH} && \
          forever stop ${APP_ENTRY} || true && \
          forever start ${APP_ENTRY}"
